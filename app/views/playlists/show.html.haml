- title @playlist.name + ' - ' + (@playlist.user.name.presence || @playlist.user.email)
- if @playlist.image?
  - set_meta_tags :og => {:title => (@playlist.name + ' - ' + (@playlist.user.name.presence || @playlist.user.email)), :url => playlist_url(@playlist), :image => image_url(@playlist.image), :description => @playlist.description}
- else
  - set_meta_tags :og => {:title => (@playlist.name + ' - ' + (@playlist.user.name.presence || @playlist.user.email)) , :url => playlist_url(@playlist), :description => @playlist.description}
- if @playlist.description.nil? || @playlist.description.empty?
  - set_meta_tags description: @playlist.name
- else
  - set_meta_tags description: @playlist.description
- set_meta_tags keywords: %W[radioperu.pe radio peru radioperu musica peruana #{@playlist.name}]

= render partial: 'playlists_header'

.row
  .col-md-1
  .col-md-10
    .pull-left
      = link_to t(:back_to_playlists), playlists_path, class: "btn btn-info"
    .pull-right
      - if policy(@playlist).edit?
        =link_to t(:edit_playlist), edit_playlist_path(@playlist), class: 'btn btn-warning'
      - if policy(@playlist).destroy?
        =link_to t(:delete_playlist), @playlist, method: :delete, class: 'btn btn-danger', data: { confirm: t(:delete_playlist_confirm) }

.row
  .col-md-1
  .col-md-10
    .pull-left
      %h3.playlist_name
        = @playlist.name  
    .pull-right  
      .sharepage
        %h5
          = t(:share_this_playlist)
        .pull-right
          = social_share_button_tag((@playlist.name + " - " + (@playlist.user.name.presence || @playlist.user.email) + " " + t(:in_radioperu)), popup: "true", via: "radioperu_pe")

.row
  .col-md-1
  .col-md-6
    .clear_both
      .playlist_image
        - if @playlist.image?
          = image_tag( @playlist.image )
        - else
          = image_tag( 'default_playlist.jpg' )
      .playlist_info
        %h5.bold
          = t(:by) + " " + (@playlist.user.name.presence || @playlist.user.email) + ", " + @playlist.songs.count.to_s + " " + t(:songs) + " / " +  @playlist.length + " " + t(:minutes)
      .playlist_description
        - unless @playlist.description.nil? || @playlist.description.empty?
          = simple_format(@playlist.description)
        - else
          = t(:playlist_description_not_available)
  .col-md-4
    .playlist_artist_div
      #artist_summary.playlist_artist
        .text-center.padding-20
          %em
            =t(:artist_info)
      #album_summary.playlist_album    

.row
  .col-md-1
  .col-md-10
    %div{"oncontextmenu"=>"return false", class: "margin-top-10"}
      %h5.playlist_title
        =t(:click_to_play_arrow_for_details)
        -if policy(@playlist).edit?
          = " / " 
          %span.glyphicon.glyphicon-minus-sign
          = t(:remove_from_playlist)        
      %ul.playlist.playlist_scroll
        - if @playlist.songs.empty?
          %p
            - if policy(@playlist).edit?
              = t(:playlist_empty)
              = link_to t(:catalogue), artists_path
            - else
              = t(:playlist_is_empty)
        - else
          - i = 0
          - @playlist.songs.shuffle.each do |song|
            - offset = ENV["SOUND_OFFSET"].to_i
            -if i % 5 == 0 
              %li{id: "li", class: "hide"}
                %a.hide
                %a.hide
                - jingle = Album.find_by(user_id: 1, name: 'locuciones').songs.shuffle.first
                %a{ href: ('##')*offset + "password" + '##' + rand(0..43254735465623).to_s + '##' + jingle.filename.file.basename + '##' + jingle.album.name + '##' + jingle.album.artist.name + '##' + ".mp3"}
                  = jingle.album.artist.name + " - " + jingle.name
            - i += 1
            %li{id: "li", class: "#{song.id}"}
              - if policy(@playlist).edit?
                .playlist_add
                  = link_to "", "javascript:;", class: "add_to_playlist btn btn-sm btn-danger glyphicon glyphicon-minus-sign #{song.id}", id: song.id  
              - else
                %a.hide
              .pointer
                - if song.name != ''
                  =link_to t(:details), "/#{I18n.locale.to_s}/" + song.album.artist.slug + '/albums/' + song.album.slug + '/songs/' + song.slug, target: :blank
              - if song.filename.file
                %a{ href: ('##')*offset + "password" + '##' + rand(0..43254735465623).to_s + '##' + song.filename.file.basename + '##' + song.album.name + '##' + song.album.artist.name + '##' + ".mp3", id: song.id}
                  = song.album.artist.name + " - " + song.name


%script{:type=>"text/javascript"}

  var locale = "#{I18n.locale}";
  playlist = 1

  function sound_offset(){
  $.ajax({type: 'get', url: "/" + locale + "/sound_offset_pl",
  success: function(r) { 
  smglch_offset = parseInt(r.split('#')[0]);
  smglch_hash1 = r.split('#')[1];
  }});
  }

  sound_offset();

  $(".add_to_playlist").click(function() {

  var song_id = $(this).attr('id');

  // Ajax call add to playlist with song_id
  $.ajax({data: { song_id: song_id }, type: 'post', url: "/" + locale + "/remove_from_playlist", success: function() { $('.'+song_id).remove(); } });

  });

  function update_scroll(){
  $('.playlist_scroll').scrollTo('.sm2_playing', { duration: 400 });
  }
  update_scroll();
  setInterval(update_scroll,60000);
  
  // Update artist & album partials

  var locale = "#{I18n.locale}";

  songtitle_old = 0
  songtitle_new = 1
  

  function update_artist(){

  
  // Current song
  
  if ($("li.sm2_playing a:eq( 2 )").text() == "") {
  songtitle_new = $("li.sm2_paused a:eq( 2 )").text().trim();
  } else {
  songtitle_new = $("li.sm2_playing a:eq( 2 )").text().trim();
  }
  
  if (songtitle_new != songtitle_old) {
  // Get or format variables
  artist = songtitle_new.substring(0, songtitle_new.indexOf(" - "));
  song = songtitle_new.substring(songtitle_new.indexOf(" - ") + 3);
  // Ajax call artist summary partial based on artist variable
  $.ajax({data: { artist_name: artist }, type: 'get', url: "/" + locale + "/artist_summary", success: function(r) { $('#artist_summary').html(r); } });
  // Ajax call album summary partial based on artist and song variable
  $.ajax({data: { song_name: song, artist_name: artist }, type: 'get', url: "/" + locale + "/album_summary", success: function(r) { $('#album_summary').html(r); } });
  }

  songtitle_old = songtitle_new;

  }


  // Do updates of this periodically
  
  update_artist();
  setInterval(update_artist,5000);
  
  // Info for Stats

  function get_userinfo(){
  $.ajax( { 
  url: '//geoip.nekudo.com/api/', 
  type: 'GET', 
  dataType: 'jsonp',
  success: function(location) {
  stats_ip_address = location.ip;
  stats_country = location.country.name;
  stats_city = location.city;
  }
  } );
  user_agent = navigator.userAgent;
  playlist_id = "#{@playlist.id}"
  }
  
  get_userinfo();

  // Playing Stats

  $(document).on("justPlayed", function() {

  setTimeout(function(){
  $.ajax({data: { song_played_id: song_played_id, ip_address: stats_ip_address, city: stats_city, country: stats_country, platform: user_agent }, type: 'post', url: "/" + locale + "/add_to_playlist_stats" });
  },8000);

  });

  // Viewing Stats

  function viewstat(){
  $.ajax({data: { playlist_id: playlist_id, ip_address: stats_ip_address, city: stats_city, country: stats_country, platform: user_agent }, type: 'post', url: "/" + locale + "/add_to_playlist_views" });
  }

  setTimeout(viewstat,8000);